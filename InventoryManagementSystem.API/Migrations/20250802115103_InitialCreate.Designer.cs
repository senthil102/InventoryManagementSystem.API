// <auto-generated />
using System;
using InventoryManagementSystem.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryManagementSystem.API.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250802115103_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastUpdated = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(984),
                            ProductId = 1,
                            Quantity = 25,
                            ReservedQuantity = 5,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            LastUpdated = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(985),
                            ProductId = 1,
                            Quantity = 15,
                            ReservedQuantity = 2,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 3,
                            LastUpdated = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(986),
                            ProductId = 2,
                            Quantity = 100,
                            ReservedQuantity = 10,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 4,
                            LastUpdated = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(987),
                            ProductId = 3,
                            Quantity = 8,
                            ReservedQuantity = 1,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "TechCorp",
                            Category = "Electronics",
                            Cost = 750.00m,
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(970),
                            Description = "High-performance laptop with 16GB RAM",
                            IsActive = true,
                            MaximumStockLevel = 100,
                            MinimumStockLevel = 10,
                            Name = "Laptop Computer",
                            Price = 999.99m,
                            SKU = "LAPTOP-001",
                            Unit = "Piece",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(970)
                        },
                        new
                        {
                            Id = 2,
                            Brand = "TechCorp",
                            Category = "Electronics",
                            Cost = 15.00m,
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(973),
                            Description = "Ergonomic wireless mouse",
                            IsActive = true,
                            MaximumStockLevel = 200,
                            MinimumStockLevel = 50,
                            Name = "Wireless Mouse",
                            Price = 29.99m,
                            SKU = "MOUSE-001",
                            Unit = "Piece",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(973)
                        },
                        new
                        {
                            Id = 3,
                            Brand = "ComfortMax",
                            Category = "Furniture",
                            Cost = 120.00m,
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(975),
                            Description = "Comfortable office chair with lumbar support",
                            IsActive = true,
                            MaximumStockLevel = 50,
                            MinimumStockLevel = 5,
                            Name = "Office Chair",
                            Price = 199.99m,
                            SKU = "CHAIR-001",
                            Unit = "Piece",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(975)
                        });
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ShippingAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivedQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.StockAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("AlertType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("ThresholdLevel")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockAlerts");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "789 Supplier Blvd",
                            City = "Chicago",
                            ContactPerson = "John Smith",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(951),
                            Email = "contact@abcelectronics.com",
                            IsActive = true,
                            Name = "ABC Electronics",
                            Phone = "555-111-2222",
                            State = "IL",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(952),
                            ZipCode = "60601"
                        },
                        new
                        {
                            Id = 2,
                            Address = "321 Factory Rd",
                            City = "Detroit",
                            ContactPerson = "Jane Doe",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(955),
                            Email = "info@xyzmanufacturing.com",
                            IsActive = true,
                            Name = "XYZ Manufacturing",
                            Phone = "555-333-4444",
                            State = "MI",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(955),
                            ZipCode = "48201"
                        });
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(826),
                            Email = "main@warehouse.com",
                            IsActive = true,
                            Name = "Main Warehouse",
                            Phone = "555-123-4567",
                            State = "NY",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(826),
                            ZipCode = "10001"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 West Ave",
                            City = "Los Angeles",
                            Country = "USA",
                            CreatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(828),
                            Email = "west@warehouse.com",
                            IsActive = true,
                            Name = "West Coast Warehouse",
                            Phone = "555-987-6543",
                            State = "CA",
                            UpdatedAt = new DateTime(2025, 8, 2, 11, 51, 3, 23, DateTimeKind.Utc).AddTicks(829),
                            ZipCode = "90210"
                        });
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Inventory", b =>
                {
                    b.HasOne("InventoryManagementSystem.API.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSystem.API.Models.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.PurchaseOrder", b =>
                {
                    b.HasOne("InventoryManagementSystem.API.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagementSystem.API.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("InventoryManagementSystem.API.Models.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagementSystem.API.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.StockAlert", b =>
                {
                    b.HasOne("InventoryManagementSystem.API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSystem.API.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("InventoryManagementSystem.API.Models.Warehouse", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
